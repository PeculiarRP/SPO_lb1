/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : MyGram.g
 *     -                            On : 2024-10-08 13:45:37
 *     -                 for the lexer : MyGramLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
MyGramLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMyGramLexer, which is returned from a call to MyGramLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pMyGramLexer are  as follows:
 *
 *  - 
 void
      pMyGramLexer->T__41(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__42(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__43(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__44(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__45(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__46(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__47(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__48(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__49(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__50(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__51(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__52(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__53(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__54(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__55(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__56(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__57(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__58(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__59(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__60(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__61(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__62(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__63(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__64(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__65(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__66(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__67(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__68(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__69(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__70(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__71(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__72(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__73(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__74(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__75(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__76(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__77(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__78(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__79(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__80(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->T__81(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->ASSIGNEQUAL(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->PLAS(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->MINUS(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->EndChar(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->LPAREN(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->RPAREN(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->COMMA(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->ELSEW(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->BOOL_LITERAL(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->IDENTIFIER(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->CHAR(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->STR(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->HEX(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->HEX_DIGIT(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->BITS(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->DEC(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->WS(pMyGramLexer)
 *  - 
 void
      pMyGramLexer->Tokens(pMyGramLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MyGramLexer_H
#define _MyGramLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MyGramLexer_Ctx_struct MyGramLexer, * pMyGramLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
MyGramLexer

 */
struct MyGramLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__41)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__42)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__43)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__44)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__45)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__46)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__47)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__48)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__49)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__50)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__51)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__52)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__53)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__56)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__57)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mASSIGNEQUAL)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mPLAS)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mEndChar)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mELSEW)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mBOOL_LITERAL)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mSTR)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mHEX)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mBITS)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mDEC)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct MyGramLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct MyGramLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MyGramLexer_Ctx_struct * ctx);
    void	    (*free)   (struct MyGramLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMyGramLexer MyGramLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pMyGramLexer MyGramLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define ARGS      4
#define ARRAY      5
#define ASSIGNEQUAL      6
#define BITS      7
#define BLOCK      8
#define BOOL_LITERAL      9
#define BREAKSTATEMENT      10
#define BUILTIN      11
#define CALLEXPR      12
#define CHAR      13
#define COMMA      14
#define CUSTOM      15
#define DEC      16
#define ELSEW      17
#define EXPR      18
#define EXPRESSION      19
#define EndChar      20
#define FUNCDEF      21
#define FUNCSIGNATURE      22
#define HEX      23
#define HEX_DIGIT      24
#define IDENTIFIER      25
#define IFSTATEMENT      26
#define LISTARG      27
#define LOOPSTATEMENT      28
#define LPAREN      29
#define MINUS      30
#define PLAS      31
#define RPAREN      32
#define SLICEEXPR      33
#define SOURCE      34
#define SOURCEITEM      35
#define ST      36
#define STATEMENT      37
#define STR      38
#define TYPEREF      39
#define WS      40
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MyGramLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
